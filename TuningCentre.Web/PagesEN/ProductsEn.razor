@page "/en/AllProducts"
@inherits ProductsBase
@inject TuningCentre.Web.Services.ProductService productService

<header>

    <div class="navbar">
        <NavMenuEn />

    </div>

</header>

<div class="img_2">

    <img src="/Images/BannerIMG/banner_bmw2.jpg" width="100%" height="100%">

</div>

<h3 style="text-align: center; color: papayawhip; margin-top: 150px; margin-bottom: 100px; font-family: 'Exo 2'">All details</h3>
<hr class="featurette-divider">

@if (Products == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <div class="form-group" style="padding-inline: 400px;">
        <input id="search-input" class="form-control" @bind="@searchTerm" />
    </div>
    <p class="d-flex justify-content-center my-4">
        <button class="btn btn-primary" style="background-color: rgb(141, 148, 156); border-color: rgb(16, 18, 21); color: papyawhip; font-family: 'Exo 2'" @onclick="Search">Search</button>
    </p>

    

    @if (Products.Count() > 0)
    {
        <div class="row mt-3 justify-content-lg-start" style="font-family: 'Exo 2'">
            @if (filteredProducts != null && filteredProducts.Any())
            {
                <DisplayProductsEn Products="@filteredProducts" />
            }
            else if (filteredProducts == null)
            {
                <DisplayProductsEn Products="@Products"/>
            }
        </div>
    }
}


@code {
    private IEnumerable<ProductDto> filteredProducts;
    private string searchTerm;

    private async Task Search()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredProducts = await productService.GetItems();
            filteredProducts = filteredProducts.Where(p => p.NameEN.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase));
        }
        else
        {
            filteredProducts = null;
        }
    }
}